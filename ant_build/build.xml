<?xml version="1.0"?>
<project name="Main" default="run">
    <!-- define names of directories -->
    <property name="src" location="../src"/>
    <property name="build" location="build"/>
    <property name="classes" location="${build}/classes"/>
    <property name="comp-tests" location="${build}/tests"/>
    <property name="jarnik" location="lib/Pokemon.jar"/>
    <property name="jared_dir" location="${build}/jar"/>
    <property name="tests" location="tests"/>
    <property name="ascii-before" location="${src}/local"/>
    <property name="ascii-after" location="${src}/local-uni"/>
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="lib/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <!--    <available classname="org.junit.runner.Runner" property="junit.installed"/>-->
    <!--    <target name="install-junit" description="Install junit" unless="junit.installed">-->
    <!--        <mkdir dir="lib/juint"/>-->
    <!--        <get dest="lib/juint/ant-junit.jar" src="http://search.maven.org/remotecontent?filepath=org/apache/ant/ant-junit/1.9.4/ant-junit-1.9.4.jar"/>-->
    <!--        <get dest="lib/juint/junit.jar" src="http://search.maven.org/remotecontent?filepath=junit/junit/4.11/junit-4.11.jar"/>-->
    <!--        <fail message="Ivy has been installed. Run the build again"/>-->
    <!--    </target>-->

    <target name="print-version">
        <echo>Java/JVM version: ${ant.java.version}</echo>
        <echo>Java/JVM detail version: ${java.version}</echo>
    </target>

    <target name="compile-src">
        <mkdir dir="${classes}"/>
        <javac srcdir="${src}" destdir="${classes}" includeAntRuntime="false">
            <classpath>
                <pathelement path="${jarnik}"/>
            </classpath>
        </javac>
    </target>

    <target name="compile" depends="package">
        <mkdir dir="${comp-tests}"/>
        <javac srcdir="${tests}" destdir="${comp-tests}" includeAntRuntime="false">
            <classpath>
                <pathelement location="lib/junit-4.13.jar"/>
                <pathelement location="lib/hamcrest-core-1.3.jar"/>
                <pathelement location="${jared_dir}/Main.jar"/>
                <!--                <pathelement location="lib/ant-1.10.8.jar"/>-->
                <!--                <pathelement path="${java.class.path}"/>-->
            </classpath>
        </javac>
    </target>


    <target name="package" depends="compile-src">
        <jar destfile="${jared_dir}/Main.jar" basedir="${classes}">
            <zipgroupfileset dir="lib" includes="Pokemon.jar"/>
            <manifest>
                <attribute name="Main" value="main"/>
                <attribute name="Main-Class" value="${ant.project.name}"/>
            </manifest>
        </jar>
    </target>

    <target name="junit-test" depends="compile">
        <junit printsummary="yes" haltonfailure="yes">
            <classpath>
                <pathelement location="lib/junit-4.13.jar"/>
                <pathelement location="lib/hamcrest-core-1.3.jar"/>
                <pathelement location="${jared_dir}/Main.jar"/>
                <pathelement location="${comp-tests}"/>
            </classpath>
            <test name="TestMessage" haltonfailure="no"
                  outfile="result">
                <formatter type="plain"/>
            </test>
        </junit>
    </target>


    <!--    <target name="test" depends="compile">-->
    <!--        <junit>-->
    <!--            <classpath>-->
    <!--                <pathelement location="${classes}"/>-->
    <!--            </classpath>-->
    <!--            <test name="TestMessage"/>-->
    <!--        </junit>-->
    <!--    </target>-->

    <target name="run" depends="package">
        <jar destfile="${build}/${ant.project.name}.jar" basedir="${classes}"/>
        <java jar="${jared_dir}/Main.jar" fork="true"/>
    </target>

    <target name="native2ascii">
        <native2ascii src="${ascii-before}" dest="${ascii-after}"
                      includes="*.properties" ext=".properties"/>
    </target>


    <target name="history">
        <exec executable="git" outputproperty="commits.count">
            <arg value="rev-list"/>
            <arg value="--count"/>
            <arg value="HEAD"/>
        </exec>

        <exec executable="git" outputproperty="current.commit">
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>

        <exec executable="git" outputproperty="current.work_diff">
            <arg value="diff"/>
            <arg value="HEAD"/>
        </exec>

        <if>
            <length string="${current.work_diff}" length="0" trim="true" when="greater"/>
            <then>
                <fail message="Working tree should not have changes"/>
            </then>
        </if>

        <trycatch>
            <try>
                <for param="i" begin="1" end="${commits.count}">
                    <sequential>
                        <trycatch>
                            <try>
                                <antcall target="compile"/>
                                <property name="breakProperty" value="true"/>
                            </try>
                            <catch>
                                <exec executable="git" outputproperty="previous.commit">
                                    <arg value="rev-parse"/>
                                    <arg value="HEAD"/>
                                </exec>
                                <echo>Error in compile target</echo>
                                <exec executable="git">
                                    <arg value="reset"/>
                                    <arg value="--hard"/>
                                    <arg value="HEAD~1"/>
                                </exec>
                            </catch>
                            <finally>
                                <fail if="breakProperty"/>
                            </finally>
                        </trycatch>
                    </sequential>
                </for>
            </try>
            <catch>
                <echo>Finally</echo>
            </catch>
            <finally>
                <if>
                    <isset property="previous.commit"/>
                    <then>
                        <exec executable="git">
                            <arg value="diff"/>
                            <arg value="${previous.commit}"/>
                            <redirector output="diff.txt" alwayslog="true"/>
                        </exec>
                    </then>
                </if>
                <echo>Original commit: ${current.commit}</echo>
            </finally>
        </trycatch>
    </target>

    <target name="clean">
        <delete dir="${build}"/>
    </target>

</project>